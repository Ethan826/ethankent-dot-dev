<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ethan Kent&#39;s Blog</title>
    <link>https://ethankent.dev/</link>
    <description>Recent content on Ethan Kent&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Oct 2019 11:57:11 -0500</lastBuildDate>
    
	<atom:link href="https://ethankent.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Limiting the scope of mutation</title>
      <link>https://ethankent.dev/posts/mutation_scopes/</link>
      <pubDate>Fri, 25 Oct 2019 11:57:11 -0500</pubDate>
      
      <guid>https://ethankent.dev/posts/mutation_scopes/</guid>
      <description>Functional programming teaches us about the dangers of mutability. But some object-oriented code mutates variables freely, in different scopes, along different code paths, and in many places.
To maintain our ability to reason about code, we can learn from functional programming and treat mutation as a risk to be managed. Even if we stop short of mandatory immutability and using constructs like monads, we can still manage mutations and recognize them as a source of bugs and confusion.</description>
    </item>
    
  </channel>
</rss>